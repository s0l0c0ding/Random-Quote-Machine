{"version":3,"sources":["redux/actions.js","assets/twIcon.svg","components/Quote.js","App.js","reportWebVitals.js","redux/quoteReducer.js","redux/store.js","index.js"],"names":["NEW_QUOTE","Qutoe","quotes","this","props","id","tweet","quote","author","sty","Card","border","Body","className","Container","Row","Col","xs","lg","OverlayTrigger","placement","overlay","Tooltip","Button","variant","size","onClick","getNewQuote","href","target","rel","alt","src","Twi","style","maxHeight","maxWidth","React","Component","mapDispatchToProps","type","connect","state","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QUOTES","store","createStore","action","rand","Math","floor","random","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.651e0950.chunk.js","sourcesContent":["\nexport const NEW_QUOTE = 'NEW_QUOTE';\n\nexport const getNewQuote = () => {\n    return {\n        type: NEW_QUOTE\n    }\n}","export default __webpack_public_path__ + \"static/media/twIcon.202c6b27.svg\";","import { connect } from \"react-redux\";\nimport { getNewQuote } from \"../redux/actions\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Twi from '../assets/twIcon.svg'\n\nclass Qutoe extends React.Component {\n\n    render() {\n        const quotes = this.props.quotes;\n        const id = this.props.id;\n        const tweet = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text='${quotes[id].quote} ${quotes[id].author}'`\n        const sty = ['primary','secondary','success','danger','warning','info','dark','light'][id>8 ? 8: id];\n        return (\n            <Card border = {sty}>\n                <div id='quote-box'>\n                    <Card.Body>\n                        <blockquote className=\"blockquote mb-0\">\n                            <p id='text'>{quotes[id].quote}</p>\n                            <Container>\n                                <Row>\n                                    <Col xs lg=\"8\">\n                                    <OverlayTrigger  placement=\"bottom\" overlay={<Tooltip id=\"tooltip-bottom\">Get a new quote!</Tooltip>}>\n                                        <Button id='new-quote' className=\"mr-2\" variant={sty} size=\"sm\" onClick={() => this.props.getNewQuote()} >NewQuote</Button>\n                                        </OverlayTrigger>\n                                        <OverlayTrigger  placement=\"bottom\" overlay={<Tooltip id=\"tooltip-bottom\">Tweet it</Tooltip>}>\n                                        <a id='tweet-quote' href={tweet} target='_blank' rel='noreferrer' alt='tweet it'>\n                                        <img src={Twi} alt='twitter logo' style= {{ maxHeight:'26px', maxWidth:'26px'}}/>\n                                        </a>\n                                        </OverlayTrigger>\n                                    </Col>\n                                    <Col xs lg=\"4\">\n                                        <footer className=\"blockquote-footer\">\n                                            <cite id='author' className=\"\">{quotes[id].author}</cite>\n                                        </footer>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </blockquote>\n                    </Card.Body>\n                </div>\n            </Card>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return state;\n}\n\nconst mapDispatchToProps = { getNewQuote };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Qutoe)  ","import Qutoe from './components/Quote'\nimport './App.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\nfunction App() {\n  return (\n    <div className=\" d-flex align-items-center min-vh-100\">\n    <Container>\n      <Row className=\"justify-content-center align-middle\">\n          <Qutoe />\n      </Row>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {NEW_QUOTE} from './actions'\n\nconst QUOTES = [\n    {quote: 'You can’t turn back the clock. But you can wind it up again.', author:'Bonnie Prudden'},\n    {quote: 'The bad news is time flies. The good news is you’re the pilot.', author: 'Michael Altshuler'},\n    {quote: 'I will always choose a lazy person to do a difficult job because he will find an easy way to do it.', author: 'Ziad K. Abdelnour'},\n    {quote: 'The best way to appreciate your job is to imagine yourself without one.', author: 'Oscar Wilde'},\n    {quote: 'Expecting the world to treat you fairly because you are a good person is a little like expecting the bull not to attack you because you are a vegetarian.', author: 'Dennis Wholey'},\n    {quote: 'Light travels faster than sound. This is why some people appear bright until you hear them speak.', author: 'Alan Dundes'},\n    {quote: 'The difference between stupidity and genius is that genius has its limits.', author: 'Albert Einstein'},\n    {quote: 'I am not in competition with anyone but myself. My goal is to improve myself continuously.', author: 'Bill Gates'},\n    {quote: 'If you\\'re not careful, the newspapers will have you hating the people who are being oppressed, and loving the people who are doing the oppressing.', author: 'Malcolm X'},\n    {quote: 'You dont lose if you get knocked down; you lose if you stay down.', author: 'Muhammad Ali'}\n]\nexport const quoteReducer =  (state =  {id: 0, quotes: QUOTES}, action) => {\n    const rand = Math.floor( Math.random()*QUOTES.length);\n    switch (action.type) {\n        case NEW_QUOTE:\n            return {\n                id: rand, \n                quotes: QUOTES\n            };\n    \n        default:\n            return state;\n    }\n}","import { createStore } from \"redux\";\nimport { quoteReducer } from \"./quoteReducer\";\n\nexport const store =  createStore(quoteReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport {store} from './redux/store'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}